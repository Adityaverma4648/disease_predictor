import pickle
import pandas as pd
import sys
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import CountVectorizer

# Load the dataset
df = pd.read_csv("D:\\disease_predictor\\backend\\PythonModel\\dataset.csv", encoding="latin-1")

# Initialize the linear regression model
model = LinearRegression()

# Save the model using pickle
with open('model.pkl', 'wb') as file:
    pickle.dump(model, file)

# Load the model from the saved file
with open('model.pkl', 'rb') as file:
    model = pickle.load(file)
    print("Model loaded successfully!")
    print("Loaded Model:", model)

# Initialize the LabelEncoder
label_encoder = LabelEncoder()

# Encode the 'disease' column
df['disease_encoded'] = label_encoder.fit_transform(df['disease'])

# Tokenize symptoms using CountVectorizer
vectorizer = CountVectorizer(tokenizer=lambda x: x.split(', '))
X = vectorizer.fit_transform(df['symptoms'])

# Split data into features and target
y = df['disease_encoded']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Get the input symptom from command-line argument
input_symptom = sys.argv[1]

# Preprocess the input symptom using the trained CountVectorizer
X_input = vectorizer.transform([input_symptom])

# Predict the disease based on the input symptom
predicted_disease_code = model.predict(X_input)
predicted_disease = label_encoder.inverse_transform([int(predicted_disease_code)])

print(f"The predicted disease based on the input symptom is: {predicted_disease[0]}")